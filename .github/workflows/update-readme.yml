name: Auto Update README

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整的git历史

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Update README with latest info
      run: |
        echo "🔄 开始更新项目时间戳..."
        
        # 显示当前目录内容
        echo "📂 当前目录内容:"
        ls -la
        
        # 项目文件夹到README项目名称的映射
        declare -A project_mapping
        project_mapping["fakePow"]="FakePow"
        project_mapping["firstContract"]="SepoliaContract"
        project_mapping["tenderly"]="BuyMeACoffee"
        
        echo "🗺️ 项目映射:"
        for key in "${!project_mapping[@]}"; do
          echo "  $key -> ${project_mapping[$key]}"
        done
        
        # 处理每个项目文件夹
        for folder in */; do
          folder_name=${folder%/}
          
          echo "📁 检查文件夹: $folder_name"
          
          # 跳过非项目文件夹
          if [[ "$folder_name" == "TestFolder" || "$folder_name" == ".git" || "$folder_name" == ".github" ]]; then
            echo "⏭️ 跳过文件夹: $folder_name"
            continue
          fi
          
          # 检查是否存在映射
          if [[ -z "${project_mapping[$folder_name]:-}" ]]; then
            echo "⚠️ 未找到 $folder_name 的项目映射，跳过"
            continue
          fi
          
          project_name="${project_mapping[$folder_name]}"
          echo "🎯 处理项目: $folder_name -> $project_name"
          
          # 获取文件夹最后提交时间
          echo "📊 获取 $folder_name 的git历史..."
          last_commit_time=$(git log -1 --format="%ci" -- "$folder_name" 2>/dev/null)
          
          if [[ -n "$last_commit_time" ]]; then
            echo "⏰ 原始提交时间: $last_commit_time"
            
            # 转换为所需格式 (YYYY-MM-DD)
            formatted_date=$(date -d "$last_commit_time" +"%Y-%m-%d" 2>/dev/null || date -j -f "%Y-%m-%d %H:%M:%S %z" "$last_commit_time" +"%Y-%m-%d" 2>/dev/null)
            
            if [[ -n "$formatted_date" ]]; then
              echo "📅 $project_name 最后更新时间: $formatted_date"
              
              # 检查项目状态
              status="🔧 开发中"
              echo "🔍 检查部署状态..."
              if [[ -f "$folder_name/deployment.md" ]]; then
                echo "✅ 找到 deployment.md 文件"
                status="✅ 已部署"
              elif find "$folder_name" -name "*.sol" -exec grep -l "deployed" {} \; 2>/dev/null | head -1; then
                echo "✅ 在.sol文件中找到部署标记"
                status="✅ 已部署"
              else
                echo "🔧 未找到部署标记，标记为开发中"
              fi
              
              echo "📊 $project_name 状态: $status"
              
              # 更新README中的时间戳和状态
              echo "📝 更新README..."
              
              # 使用更安全的sed命令来更新README
              if grep -q "| $project_name |" README.md; then
                # 创建临时文件进行安全替换
                temp_file=$(mktemp)
                
                # 使用awk进行精确的行替换
                awk -v project="$project_name" -v date="$formatted_date" -v stat="$status" '
                /^\| [^|]+ \| [^|]+ \| [^|]+ \| [^|]+ \|/ {
                  if ($2 ~ project) {
                    gsub(/\| [^|]+ \| [^|]+ \|$/, "| " date " | " stat " |")
                  }
                }
                { print }
                ' README.md > "$temp_file"
                
                mv "$temp_file" README.md
                echo "✅ 已更新 $project_name 的信息"
              else
                echo "⚠️ 在README中未找到项目 $project_name"
              fi
            else
              echo "❌ 无法格式化日期: $last_commit_time"
            fi
          else
            echo "⚠️ 未找到 $folder_name 的git历史"
          fi
        done
        
        # 检查是否有改动
        echo "🔍 检查README是否有变化..."
        git diff README.md
        
        if git diff --quiet README.md; then
          echo "ℹ️ README.md 无需更新"
        else
          echo "✅ README.md 已更新"
        fi

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 检查是否有变化
        if git diff --quiet README.md; then
          echo "ℹ️ No changes to commit"
          exit 0
        fi
        
        echo "📝 提交变化..."
        git add README.md
        git commit -m "🤖 Auto-update README timestamps [skip ci]"
        
        echo "🚀 推送到远程仓库..."
        git push